#include "hog.h"

#include <libutils/rasserts.h>

#include <opencv2/imgproc.hpp>

#define _USE_MATH_DEFINES
#include <math.h>


HoG buildHoG(cv::Mat grad_x, cv::Mat grad_y) {
    rassert(grad_x.type() == CV_32FC1, 2378274892374008);
    rassert(grad_y.type() == CV_32FC1, 2378274892374008);

    rassert(grad_x.rows == grad_y.rows, 3748247980010);
    rassert(grad_x.cols == grad_y.cols, 3748247980011);
    int height = grad_x.rows;
    int width = grad_x.cols;

    HoG hog(NBINS, 0);

    // 3) РїСЂРѕР±РµРіРёС‚Рµ РїРѕ РІСЃРµРј РїРёРєСЃРµР»СЏРј РІС…РѕРґРЅРѕР№ РєР°СЂС‚РёРЅРєРё Рё РїРѕСЃРјРѕС‚СЂРёС‚Рµ РЅР° РєР°Р¶РґС‹Р№ РіСЂР°РґРёРµРЅС‚
    // (РѕРїСЂРµРґРµР»РµРЅРЅС‹Р№ РґРІСѓРјСЏ С‡РёСЃР»Р°РјРё: dx РїСЂРѕРµРєС†РёРµР№ РЅР° РѕСЃСЊ x РІ grad_x, dy РїСЂРѕРµРєС†РёРµР№ РЅР° РѕСЃСЊ y РІ grad_y)
    // 4) РѕРїСЂРµРґРµР»РёС‚Рµ РµРіРѕ СЃРёР»Сѓ (РєРѕСЂРµРЅСЊ РёР· СЃСѓРјРјС‹ РєРІР°РґСЂР°С‚РѕРІ), РѕРїСЂРµРґРµР»РёС‚Рµ РµРіРѕ СѓРіРѕР» РЅР°РїСЂР°РІР»РµРЅРёСЏ:
    // СЂРµРєРѕРјРµРЅРґСѓСЋ РІРѕСЃРїРѕР»СЊР·РѕРІР°С‚СЊСЃСЏ atan2(dy, dx) - РѕРЅ РІРѕР·РІСЂР°С‰Р°РµС‚ СЂР°РґРёР°РЅС‹ - https://en.cppreference.com/w/cpp/numeric/math/atan2
    // РїСЂРѕС‡РёС‚Р°Р№С‚Рµ РїРѕ СЃСЃС‹Р»РєРµ РЅР° РґРѕРєСѓРјРµРЅС‚Р°С†РёСЋ (РІ РїСЂРѕС€Р»РѕР№ СЃС‚СЂРѕРєРµ) - РєР°РєРѕР№ РґРёР°РїР°Р·РѕРЅ Р·РЅР°С‡РµРЅРёР№ Сѓ СѓРіР»Р°-СЂРµР·СѓР»СЊС‚Р°С‚Р° atan2 РјРѕР¶РµС‚ Р±С‹С‚СЊ?
    // 5) РІРЅРµСЃРёС‚Рµ РµРіРѕ СЃРёР»Сѓ РєР°Рє РіРѕР»РѕСЃ Р·Р° СЃРѕРѕС‚РІРµС‚СЃС‚РІСѓСЋС‰СѓСЋ РµРіРѕ СѓРіР»Сѓ РєРѕСЂР·РёРЅСѓ
    for (int j = 0; j < height; ++j) {
        for (int i = 0; i < width; ++i) {
            float dx = grad_x.at<float>(j, i);
            float dy = grad_y.at<float>(j, i);
            float strength = sqrt(dx * dx + dy * dy);

            if (strength < 10) // РїСЂРѕРїСѓСЃРєР°Р№С‚Рµ СЃР»Р°Р±С‹Рµ РіСЂР°РґРёРµРЅС‚С‹, СЌС‚Рѕ РЅСѓР¶РЅРѕ С‡С‚РѕР±С‹ РёРіРЅРѕСЂРёСЂРѕРІР°С‚СЊ Р°СЂС‚РµС„Р°РєС‚С‹ СЃР¶Р°С‚РёСЏ РІ jpeg (РЅР°РїСЂРёРјРµСЂ РІ line01.jpg РїРёРєСЃРµР»Рё РЅРµ РёРґРµР°Р»СЊРЅРѕ Р±РµР»С‹Рµ/С‡РµСЂРЅС‹Рµ, РµСЃС‚СЊ РЅРµР±РѕР»СЊС€РёРµ РѕС‚РєР»РѕРЅРµРЅРёСЏ)
                continue;

            float alpha = atan2(dy, dx);
            if (alpha < 0) alpha += M_PI * 2.0;
            float del = 2 * M_PI / NBINS;

            int bin = (int) (alpha / del);

            rassert(bin >= 0, 3842934728039);
            rassert(bin < NBINS, 34729357289040);
            hog[bin] += strength;
        }
    }

    rassert(hog.size() == NBINS, 23478937290010);
    float s = 0;
    for (auto &elem : hog) s += elem;
    for (auto &elem : hog) elem /= s;
    return hog;
}

HoG buildHoG(const cv::Mat& originalImg) {
    cv::Mat img = originalImg.clone();

    rassert(img.type() == CV_8UC3, 347283678950077);

    cv::cvtColor(img, img, cv::COLOR_BGR2GRAY); // РїСЂРµРѕР±СЂР°Р·СѓРµРј РІ РѕС‚С‚РµРЅРєРё СЃРµСЂРѕРіРѕ

    cv::Mat grad_x, grad_y; // РІ СЌС‚РёС… РґРІСѓС… РєР°СЂС‚РёРЅРєР°С… РјС‹ РїРѕР»СѓС‡РёРј РїСЂРѕРёР·РІРѕРґРЅСѓСЋ (РіСЂР°РґРёРµРЅС‚=gradient) РїРѕ РѕСЃРё x Рё y
    // РґР»СЏ СЌС‚РѕРіРѕ РґРѕСЃС‚Р°С‚РѕС‡РЅРѕ РґРІР°Р¶РґС‹ РїСЂРёРјРµРЅРёС‚СЊ РѕРїРµСЂР°С‚РѕСЂ РЎРѕР±РµР»СЏ (СЂРµР°Р»РёР·РѕРІР°РЅРЅС‹Р№ РІ OpenCV)
    cv::Sobel(img, grad_x, CV_32FC1, 1, 0);
    cv::Sobel(img, grad_y, CV_32FC1, 0, 1);
    rassert(!grad_x.empty(), 234892748239070017);
    rassert(!grad_y.empty(), 234892748239070018);

    HoG hog = buildHoG(grad_x, grad_y);
    return hog;
}

// РџСЂРёРјРµСЂ РєРѕСЂСЂРµРєС‚РЅРѕРіРѕ РІС‹РІРѕРґР° (РІС‹РІРѕРґРёС‚Рµ РЅРµ СЃР°РјРѕ Р·РЅР°С‡РµРЅРёРµ РЅР°РєРѕРїР»РµРЅРЅС‹С… РіРѕР»РѕСЃРѕРІ Р·Р° РєР°Р¶РґРѕРµ РЅР°РїСЂР°РІР»РµРЅРёРµ, Р° РїСЂРѕС†РµРЅС‚ РѕС‚ РѕР±С‰РµР№ СЃСѓРјРјС‹ РіРѕР»РѕСЃРѕРІ):
// HoG[22.5=0%, 67.5=78%, 112.5=21%, 157.5=0%, 202.5=0%, 247.5=0%, 292.5=0%, 337.5=0%]
std::ostream &operator<<(std::ostream &os, const HoG &hog) {
    rassert(hog.size() == NBINS, 234728497230016);

    float del = M_PI * 2 / NBINS;
    os << "HoG[";
    for (int bin = 0; bin < NBINS; ++bin) {
        os << (del * (bin + bin + 1.0) / 2.0) / M_PI * 180.0 << "=" << hog[bin] * 100 << "%, ";
    }
    os << "]";
    return os;
}

float pow2(float x) {
    return x * x;
}

double distance(HoG a, HoG b) {
    rassert(a.size() == NBINS, 237281947230077);
    rassert(b.size() == NBINS, 237281947230078);
    // РїРѕРґСѓРјР°Р№С‚Рµ - РєР°Рє РјРѕР¶РЅРѕ РґРѕР±Р°РІРёС‚СЊ РЅРµР·Р°РІРёСЃРёРјРѕСЃС‚СЊ (РёРЅРІР°СЂРёР°РЅС‚РЅРѕСЃС‚СЊ) РіРёСЃС‚Р°РіСЂР°РјРјС‹ РіСЂР°РґРёРµРЅС‚РѕРІ Рє С‚РѕРјСѓ РЅР°СЃРєРѕР»СЊРєРѕ РєРѕРЅС‚СЂР°СЃС‚РЅР°СЏ РёР»Рё Р±Р»РµРєР»Р°СЏ РєР°СЂС‚РёРЅРєР°?
    // РїРѕРґСЃРєР°Р·РєР°: РЅР° РєРѕРЅС‚СЂР°СЃС‚РЅРѕР№ РєР°СЂС‚РёРЅРєРµ РІСЃРµ РіСЂР°РґРёРµРЅС‚С‹ РіРѕСЂР°Р·РґРѕ СЃРёР»СЊРЅРµРµ, Р° РЅР° Р±Р»РµРєР»РѕР№ РєР°СЂС‚РёРЅРєРµ РІСЃРµ РіСЂР°РґРёРµРЅС‚С‹ РіРѕСЂР°Р·РґРѕ СЃР»Р°Р±РµРµ, РЅРѕ РїСЂРѕРїРѕСЂС†РёРё РјРµР¶РґСѓ РіСЂР°РґРёРµРЅС‚Р°РјРё (СЂР°СЃРїСЂРѕС†РµРЅС‚РѕРІРєР°) РЅРµ РёР·РјРµРЅРЅС‹!
    double s = 0;
    for (int i = 0; i < NBINS; ++i)
    {
        s += pow2(a[i] - b[i]);
    }
    return sqrt(s);
}
